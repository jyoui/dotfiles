set cm=blowfish2

" 可以使用 % 来移动的匹配对 (:) [:] {:} `:`, 可惜不支持 "" '' ``,只能不一样的才可以
set matchpairs+=<:>             " Match, to be used with %
set matchpairs+=“:”,‘:’,「:」

set encoding=utf-8
" add shift-jis to fit the situation in Tokyo
" see more with `:help 'fileencodings'`
set fileencodings=ucs-bom,utf-8,shift-jis,cp936,gb18030,big5,euc-jp,euc-kr,latin1

set nospell

if has('gui')
  set guifont=Monospace\ 16
endif

nnoremap q; q:
"nnoremap ; :

" Tabularize {
    if isdirectory(expand("~/.vim/bundle/tabular"))
        nnoremap <c-c> :Tabularize /
        vnoremap <c-c> :Tabularize /

        nnoremap <Leader>d= :Tabularize /=<CR>
        vnoremap <Leader>d= :Tabularize /=<CR>

        nnoremap <Leader>d, :Tabularize /,<CR>
        vnoremap <Leader>d, :Tabularize /,<CR>

        nnoremap <Leader>d- :Tabularize /--<CR>
        vnoremap <Leader>d- :Tabularize /--<CR>

        nnoremap <Leader>d/ :Tabularize /\/\/<CR>
        vnoremap <Leader>d/ :Tabularize /\/\/<CR>

    endif
" }


" 覆盖掉默认的esc行为
inoremap <expr> <Esc>      pumvisible() ? "\<C-y>\<Esc>" : "\<Esc>"

" 覆盖掉默认的easy moving
nnoremap <C-J> <C-W>j
nnoremap <C-K> <C-W>k
nnoremap <C-L> <C-W>l
nnoremap <C-H> <C-W>h

nnoremap <F2> :tabprevious<CR>
nnoremap <F3> :tabnext<CR>

" 已经有这个选项了，我以为还要写一个函数呢，终于忍够了输入 :set paste的日子
set pastetoggle=<f4>

"Thu 14:50 May 04 2017
"inoremap <F5> <C-R>=strftime("%a %H:%M %b %d %Y")<CR>


"2017-05-04 Thu 14:50
nnoremap <F5> "=strftime("%Y-%m-%d %a %H:%M")<CR>p

inoremap <F5> <C-R>=strftime("%H:%M")<CR>

function! ToggleFdm()
  if &fdm == 'indent'
    set fdm=marker
  elseif &fdm == 'marker'
    set fdm=indent
  endif
endfunction
"nnoremap <F6> :call ToggleFdm()<CR>
"inoremap <F6> <Esc>:call ToggleFdm()<CR>

" 临时用来格式化源码
nnoremap <F8> :ret <CR> :%su /\s\+$<CR>

" to be used
" <F7> - <F10>
"
"      centos         macosx
" F11: full screen
" F12: hide menu

set textwidth=80
set colorcolumn=81
set wrap

" 使用tab
set noexpandtab

" 使用空格
"set expandtab " 扩展tab with合适数量的空格

set smarttab
set shiftround
let use_4_space = 1
if use_4_space
  set tabstop=4
  set softtabstop=4
  set shiftwidth=4
else
  set tabstop=2
  set softtabstop=2 " 处理空格的时候就像是在处理tab一样,必开的选项
  set shiftwidth=2 " 自动缩进时缩进的空格数量; with cindent, >> <<, etc.
endif

"set foldmethod=marker
"noremap zo zO
"noremap zO zo
"noremap zc zC
"noremap zC zc


"let &showbreak='^'
"set list
"set listchars=tab:>·,trail:·
set nolist

nmap U gU
nmap W :w<cr>
nmap S :w<cr>
nmap Q :q<cr>
nmap X :x<cr>

" 再也不用每次很麻烦地保存了...
noremap W :w<cr>
noremap S :w<cr>
noremap Q :q<cr>
noremap X :x<cr>

function! Incr()
  let a = line('.') - line("'<")
  let c = virtcol("'<")
  if a > 0
    execute 'normal! '.c.'|'.a."\<C-a>"
  endif
  normal `<
endfunction
vnoremap <C-a> :call Incr()<CR>

let g:syntastic_asm_compiler='nasm'

let NERDTreeIgnore +=['.o$[[file]]', '\.png$', '\.jpg$', '\.so$[[file]]']

" If you have vim >=8.0 or Neovim >= 0.1.5
"if (has("termguicolors"))
 "set termguicolors
"endif
"colorscheme tender


function! TabMessage(cmd)
  redir => message
  silent execute a:cmd
  redir END
  if empty(message)
    echoerr "no output"
  else
    " use "new" instead of "tabnew" below if you prefer split windows instead of tabs
    tabnew
    setlocal buftype=nofile bufhidden=wipe noswapfile nobuflisted nomodified
    silent put=message
  endif
endfunction
command! -nargs=+ -complete=command TabMessage call TabMessage(<q-args>)
" 可以把vim ex命令输出到一个tab窗口中
